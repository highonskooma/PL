Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    END
    JUMP

Grammar

Rule 0     S' -> Comandos
Rule 1     Comandos -> Comando
Rule 2     Comandos -> Comandos Comando
Rule 3     Comando -> ExprR
Rule 4     Comando -> Declaracao
Rule 5     Comando -> Atribuicao
Rule 6     Comando -> IFELSE
Rule 7     Factor -> num
Rule 8     Factor -> - num
Rule 9     Factor -> id
Rule 10    Factor -> TRUE
Rule 11    Factor -> FALSE
Rule 12    Factor -> ( ExprR )
Rule 13    ExprR -> Expr < Expr
Rule 14    ExprR -> Expr > Expr
Rule 15    ExprR -> Expr EQUALS Expr
Rule 16    ExprR -> Expr NOTEQUALS Expr
Rule 17    ExprR -> Expr
Rule 18    Expr -> Termo
Rule 19    Expr -> Expr + Termo
Rule 20    Expr -> Expr - Termo
Rule 21    Termo -> Factor
Rule 22    Declaracao -> INT id
Rule 23    Atribuicao -> id = ExprR
Rule 24    Atribuicoes -> Atribuicao
Rule 25    Atribuicoes -> Atribuicoes Atribuicao
Rule 26    IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes }
Rule 27    IFELSE -> IF ( ExprR ) { Atribuicoes }

Terminals, with rules where they appear

(                    : 12 26 27
)                    : 12 26 27
+                    : 19
-                    : 8 20
<                    : 13
=                    : 23
>                    : 14
ELSE                 : 26
END                  : 
EQUALS               : 15
FALSE                : 11
IF                   : 26 27
INT                  : 22
JUMP                 : 
NOTEQUALS            : 16
TRUE                 : 10
error                : 
id                   : 9 22 23
num                  : 7 8
{                    : 26 26 27
}                    : 26 26 27

Nonterminals, with rules where they appear

Atribuicao           : 5 24 25
Atribuicoes          : 25 26 26 27
Comando              : 1 2
Comandos             : 2 0
Declaracao           : 4
Expr                 : 13 13 14 14 15 15 16 16 17 19 20
ExprR                : 3 12 23 26 27
Factor               : 21
IFELSE               : 6
Termo                : 18 19 20

Parsing method: LALR

state 0

    (0) S' -> . Comandos
    (1) Comandos -> . Comando
    (2) Comandos -> . Comandos Comando
    (3) Comando -> . ExprR
    (4) Comando -> . Declaracao
    (5) Comando -> . Atribuicao
    (6) Comando -> . IFELSE
    (13) ExprR -> . Expr < Expr
    (14) ExprR -> . Expr > Expr
    (15) ExprR -> . Expr EQUALS Expr
    (16) ExprR -> . Expr NOTEQUALS Expr
    (17) ExprR -> . Expr
    (22) Declaracao -> . INT id
    (23) Atribuicao -> . id = ExprR
    (26) IFELSE -> . IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes }
    (27) IFELSE -> . IF ( ExprR ) { Atribuicoes }
    (18) Expr -> . Termo
    (19) Expr -> . Expr + Termo
    (20) Expr -> . Expr - Termo
    (21) Termo -> . Factor
    (7) Factor -> . num
    (8) Factor -> . - num
    (9) Factor -> . id
    (10) Factor -> . TRUE
    (11) Factor -> . FALSE
    (12) Factor -> . ( ExprR )

    INT             shift and go to state 8
    id              shift and go to state 9
    IF              shift and go to state 10
    num             shift and go to state 15
    -               shift and go to state 13
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    (               shift and go to state 11

    Comandos                       shift and go to state 1
    Comando                        shift and go to state 2
    ExprR                          shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    IFELSE                         shift and go to state 6
    Expr                           shift and go to state 7
    Termo                          shift and go to state 12
    Factor                         shift and go to state 14

state 1

    (0) S' -> Comandos .
    (2) Comandos -> Comandos . Comando
    (3) Comando -> . ExprR
    (4) Comando -> . Declaracao
    (5) Comando -> . Atribuicao
    (6) Comando -> . IFELSE
    (13) ExprR -> . Expr < Expr
    (14) ExprR -> . Expr > Expr
    (15) ExprR -> . Expr EQUALS Expr
    (16) ExprR -> . Expr NOTEQUALS Expr
    (17) ExprR -> . Expr
    (22) Declaracao -> . INT id
    (23) Atribuicao -> . id = ExprR
    (26) IFELSE -> . IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes }
    (27) IFELSE -> . IF ( ExprR ) { Atribuicoes }
    (18) Expr -> . Termo
    (19) Expr -> . Expr + Termo
    (20) Expr -> . Expr - Termo
    (21) Termo -> . Factor
    (7) Factor -> . num
    (8) Factor -> . - num
    (9) Factor -> . id
    (10) Factor -> . TRUE
    (11) Factor -> . FALSE
    (12) Factor -> . ( ExprR )

    INT             shift and go to state 8
    id              shift and go to state 9
    IF              shift and go to state 10
    num             shift and go to state 15
    -               shift and go to state 13
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    (               shift and go to state 11

    Comando                        shift and go to state 18
    ExprR                          shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    IFELSE                         shift and go to state 6
    Expr                           shift and go to state 7
    Termo                          shift and go to state 12
    Factor                         shift and go to state 14

state 2

    (1) Comandos -> Comando .

    INT             reduce using rule 1 (Comandos -> Comando .)
    id              reduce using rule 1 (Comandos -> Comando .)
    IF              reduce using rule 1 (Comandos -> Comando .)
    num             reduce using rule 1 (Comandos -> Comando .)
    -               reduce using rule 1 (Comandos -> Comando .)
    TRUE            reduce using rule 1 (Comandos -> Comando .)
    FALSE           reduce using rule 1 (Comandos -> Comando .)
    (               reduce using rule 1 (Comandos -> Comando .)
    $end            reduce using rule 1 (Comandos -> Comando .)


state 3

    (3) Comando -> ExprR .

    INT             reduce using rule 3 (Comando -> ExprR .)
    id              reduce using rule 3 (Comando -> ExprR .)
    IF              reduce using rule 3 (Comando -> ExprR .)
    num             reduce using rule 3 (Comando -> ExprR .)
    -               reduce using rule 3 (Comando -> ExprR .)
    TRUE            reduce using rule 3 (Comando -> ExprR .)
    FALSE           reduce using rule 3 (Comando -> ExprR .)
    (               reduce using rule 3 (Comando -> ExprR .)
    $end            reduce using rule 3 (Comando -> ExprR .)


state 4

    (4) Comando -> Declaracao .

    INT             reduce using rule 4 (Comando -> Declaracao .)
    id              reduce using rule 4 (Comando -> Declaracao .)
    IF              reduce using rule 4 (Comando -> Declaracao .)
    num             reduce using rule 4 (Comando -> Declaracao .)
    -               reduce using rule 4 (Comando -> Declaracao .)
    TRUE            reduce using rule 4 (Comando -> Declaracao .)
    FALSE           reduce using rule 4 (Comando -> Declaracao .)
    (               reduce using rule 4 (Comando -> Declaracao .)
    $end            reduce using rule 4 (Comando -> Declaracao .)


state 5

    (5) Comando -> Atribuicao .

    INT             reduce using rule 5 (Comando -> Atribuicao .)
    id              reduce using rule 5 (Comando -> Atribuicao .)
    IF              reduce using rule 5 (Comando -> Atribuicao .)
    num             reduce using rule 5 (Comando -> Atribuicao .)
    -               reduce using rule 5 (Comando -> Atribuicao .)
    TRUE            reduce using rule 5 (Comando -> Atribuicao .)
    FALSE           reduce using rule 5 (Comando -> Atribuicao .)
    (               reduce using rule 5 (Comando -> Atribuicao .)
    $end            reduce using rule 5 (Comando -> Atribuicao .)


state 6

    (6) Comando -> IFELSE .

    INT             reduce using rule 6 (Comando -> IFELSE .)
    id              reduce using rule 6 (Comando -> IFELSE .)
    IF              reduce using rule 6 (Comando -> IFELSE .)
    num             reduce using rule 6 (Comando -> IFELSE .)
    -               reduce using rule 6 (Comando -> IFELSE .)
    TRUE            reduce using rule 6 (Comando -> IFELSE .)
    FALSE           reduce using rule 6 (Comando -> IFELSE .)
    (               reduce using rule 6 (Comando -> IFELSE .)
    $end            reduce using rule 6 (Comando -> IFELSE .)


state 7

    (13) ExprR -> Expr . < Expr
    (14) ExprR -> Expr . > Expr
    (15) ExprR -> Expr . EQUALS Expr
    (16) ExprR -> Expr . NOTEQUALS Expr
    (17) ExprR -> Expr .
    (19) Expr -> Expr . + Termo
    (20) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    <               shift and go to state 19
    >               shift and go to state 20
    EQUALS          shift and go to state 21
    NOTEQUALS       shift and go to state 22
    INT             reduce using rule 17 (ExprR -> Expr .)
    id              reduce using rule 17 (ExprR -> Expr .)
    IF              reduce using rule 17 (ExprR -> Expr .)
    num             reduce using rule 17 (ExprR -> Expr .)
    TRUE            reduce using rule 17 (ExprR -> Expr .)
    FALSE           reduce using rule 17 (ExprR -> Expr .)
    (               reduce using rule 17 (ExprR -> Expr .)
    $end            reduce using rule 17 (ExprR -> Expr .)
    )               reduce using rule 17 (ExprR -> Expr .)
    }               reduce using rule 17 (ExprR -> Expr .)
    +               shift and go to state 23
    -               shift and go to state 24

  ! -               [ reduce using rule 17 (ExprR -> Expr .) ]


state 8

    (22) Declaracao -> INT . id

    id              shift and go to state 25


state 9

    (23) Atribuicao -> id . = ExprR
    (9) Factor -> id .

    =               shift and go to state 26
    <               reduce using rule 9 (Factor -> id .)
    >               reduce using rule 9 (Factor -> id .)
    EQUALS          reduce using rule 9 (Factor -> id .)
    NOTEQUALS       reduce using rule 9 (Factor -> id .)
    +               reduce using rule 9 (Factor -> id .)
    -               reduce using rule 9 (Factor -> id .)
    INT             reduce using rule 9 (Factor -> id .)
    id              reduce using rule 9 (Factor -> id .)
    IF              reduce using rule 9 (Factor -> id .)
    num             reduce using rule 9 (Factor -> id .)
    TRUE            reduce using rule 9 (Factor -> id .)
    FALSE           reduce using rule 9 (Factor -> id .)
    (               reduce using rule 9 (Factor -> id .)
    $end            reduce using rule 9 (Factor -> id .)


state 10

    (26) IFELSE -> IF . ( ExprR ) { Atribuicoes } ELSE { Atribuicoes }
    (27) IFELSE -> IF . ( ExprR ) { Atribuicoes }

    (               shift and go to state 27


state 11

    (12) Factor -> ( . ExprR )
    (13) ExprR -> . Expr < Expr
    (14) ExprR -> . Expr > Expr
    (15) ExprR -> . Expr EQUALS Expr
    (16) ExprR -> . Expr NOTEQUALS Expr
    (17) ExprR -> . Expr
    (18) Expr -> . Termo
    (19) Expr -> . Expr + Termo
    (20) Expr -> . Expr - Termo
    (21) Termo -> . Factor
    (7) Factor -> . num
    (8) Factor -> . - num
    (9) Factor -> . id
    (10) Factor -> . TRUE
    (11) Factor -> . FALSE
    (12) Factor -> . ( ExprR )

    num             shift and go to state 15
    -               shift and go to state 13
    id              shift and go to state 29
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    (               shift and go to state 11

    ExprR                          shift and go to state 28
    Expr                           shift and go to state 7
    Termo                          shift and go to state 12
    Factor                         shift and go to state 14

state 12

    (18) Expr -> Termo .

    <               reduce using rule 18 (Expr -> Termo .)
    >               reduce using rule 18 (Expr -> Termo .)
    EQUALS          reduce using rule 18 (Expr -> Termo .)
    NOTEQUALS       reduce using rule 18 (Expr -> Termo .)
    +               reduce using rule 18 (Expr -> Termo .)
    -               reduce using rule 18 (Expr -> Termo .)
    INT             reduce using rule 18 (Expr -> Termo .)
    id              reduce using rule 18 (Expr -> Termo .)
    IF              reduce using rule 18 (Expr -> Termo .)
    num             reduce using rule 18 (Expr -> Termo .)
    TRUE            reduce using rule 18 (Expr -> Termo .)
    FALSE           reduce using rule 18 (Expr -> Termo .)
    (               reduce using rule 18 (Expr -> Termo .)
    $end            reduce using rule 18 (Expr -> Termo .)
    )               reduce using rule 18 (Expr -> Termo .)
    }               reduce using rule 18 (Expr -> Termo .)


state 13

    (8) Factor -> - . num

    num             shift and go to state 30


state 14

    (21) Termo -> Factor .

    <               reduce using rule 21 (Termo -> Factor .)
    >               reduce using rule 21 (Termo -> Factor .)
    EQUALS          reduce using rule 21 (Termo -> Factor .)
    NOTEQUALS       reduce using rule 21 (Termo -> Factor .)
    +               reduce using rule 21 (Termo -> Factor .)
    -               reduce using rule 21 (Termo -> Factor .)
    INT             reduce using rule 21 (Termo -> Factor .)
    id              reduce using rule 21 (Termo -> Factor .)
    IF              reduce using rule 21 (Termo -> Factor .)
    num             reduce using rule 21 (Termo -> Factor .)
    TRUE            reduce using rule 21 (Termo -> Factor .)
    FALSE           reduce using rule 21 (Termo -> Factor .)
    (               reduce using rule 21 (Termo -> Factor .)
    $end            reduce using rule 21 (Termo -> Factor .)
    )               reduce using rule 21 (Termo -> Factor .)
    }               reduce using rule 21 (Termo -> Factor .)


state 15

    (7) Factor -> num .

    <               reduce using rule 7 (Factor -> num .)
    >               reduce using rule 7 (Factor -> num .)
    EQUALS          reduce using rule 7 (Factor -> num .)
    NOTEQUALS       reduce using rule 7 (Factor -> num .)
    +               reduce using rule 7 (Factor -> num .)
    -               reduce using rule 7 (Factor -> num .)
    INT             reduce using rule 7 (Factor -> num .)
    id              reduce using rule 7 (Factor -> num .)
    IF              reduce using rule 7 (Factor -> num .)
    num             reduce using rule 7 (Factor -> num .)
    TRUE            reduce using rule 7 (Factor -> num .)
    FALSE           reduce using rule 7 (Factor -> num .)
    (               reduce using rule 7 (Factor -> num .)
    $end            reduce using rule 7 (Factor -> num .)
    )               reduce using rule 7 (Factor -> num .)
    }               reduce using rule 7 (Factor -> num .)


state 16

    (10) Factor -> TRUE .

    <               reduce using rule 10 (Factor -> TRUE .)
    >               reduce using rule 10 (Factor -> TRUE .)
    EQUALS          reduce using rule 10 (Factor -> TRUE .)
    NOTEQUALS       reduce using rule 10 (Factor -> TRUE .)
    +               reduce using rule 10 (Factor -> TRUE .)
    -               reduce using rule 10 (Factor -> TRUE .)
    INT             reduce using rule 10 (Factor -> TRUE .)
    id              reduce using rule 10 (Factor -> TRUE .)
    IF              reduce using rule 10 (Factor -> TRUE .)
    num             reduce using rule 10 (Factor -> TRUE .)
    TRUE            reduce using rule 10 (Factor -> TRUE .)
    FALSE           reduce using rule 10 (Factor -> TRUE .)
    (               reduce using rule 10 (Factor -> TRUE .)
    $end            reduce using rule 10 (Factor -> TRUE .)
    )               reduce using rule 10 (Factor -> TRUE .)
    }               reduce using rule 10 (Factor -> TRUE .)


state 17

    (11) Factor -> FALSE .

    <               reduce using rule 11 (Factor -> FALSE .)
    >               reduce using rule 11 (Factor -> FALSE .)
    EQUALS          reduce using rule 11 (Factor -> FALSE .)
    NOTEQUALS       reduce using rule 11 (Factor -> FALSE .)
    +               reduce using rule 11 (Factor -> FALSE .)
    -               reduce using rule 11 (Factor -> FALSE .)
    INT             reduce using rule 11 (Factor -> FALSE .)
    id              reduce using rule 11 (Factor -> FALSE .)
    IF              reduce using rule 11 (Factor -> FALSE .)
    num             reduce using rule 11 (Factor -> FALSE .)
    TRUE            reduce using rule 11 (Factor -> FALSE .)
    FALSE           reduce using rule 11 (Factor -> FALSE .)
    (               reduce using rule 11 (Factor -> FALSE .)
    $end            reduce using rule 11 (Factor -> FALSE .)
    )               reduce using rule 11 (Factor -> FALSE .)
    }               reduce using rule 11 (Factor -> FALSE .)


state 18

    (2) Comandos -> Comandos Comando .

    INT             reduce using rule 2 (Comandos -> Comandos Comando .)
    id              reduce using rule 2 (Comandos -> Comandos Comando .)
    IF              reduce using rule 2 (Comandos -> Comandos Comando .)
    num             reduce using rule 2 (Comandos -> Comandos Comando .)
    -               reduce using rule 2 (Comandos -> Comandos Comando .)
    TRUE            reduce using rule 2 (Comandos -> Comandos Comando .)
    FALSE           reduce using rule 2 (Comandos -> Comandos Comando .)
    (               reduce using rule 2 (Comandos -> Comandos Comando .)
    $end            reduce using rule 2 (Comandos -> Comandos Comando .)


state 19

    (13) ExprR -> Expr < . Expr
    (18) Expr -> . Termo
    (19) Expr -> . Expr + Termo
    (20) Expr -> . Expr - Termo
    (21) Termo -> . Factor
    (7) Factor -> . num
    (8) Factor -> . - num
    (9) Factor -> . id
    (10) Factor -> . TRUE
    (11) Factor -> . FALSE
    (12) Factor -> . ( ExprR )

    num             shift and go to state 15
    -               shift and go to state 13
    id              shift and go to state 29
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    (               shift and go to state 11

    Expr                           shift and go to state 31
    Termo                          shift and go to state 12
    Factor                         shift and go to state 14

state 20

    (14) ExprR -> Expr > . Expr
    (18) Expr -> . Termo
    (19) Expr -> . Expr + Termo
    (20) Expr -> . Expr - Termo
    (21) Termo -> . Factor
    (7) Factor -> . num
    (8) Factor -> . - num
    (9) Factor -> . id
    (10) Factor -> . TRUE
    (11) Factor -> . FALSE
    (12) Factor -> . ( ExprR )

    num             shift and go to state 15
    -               shift and go to state 13
    id              shift and go to state 29
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    (               shift and go to state 11

    Expr                           shift and go to state 32
    Termo                          shift and go to state 12
    Factor                         shift and go to state 14

state 21

    (15) ExprR -> Expr EQUALS . Expr
    (18) Expr -> . Termo
    (19) Expr -> . Expr + Termo
    (20) Expr -> . Expr - Termo
    (21) Termo -> . Factor
    (7) Factor -> . num
    (8) Factor -> . - num
    (9) Factor -> . id
    (10) Factor -> . TRUE
    (11) Factor -> . FALSE
    (12) Factor -> . ( ExprR )

    num             shift and go to state 15
    -               shift and go to state 13
    id              shift and go to state 29
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    (               shift and go to state 11

    Expr                           shift and go to state 33
    Termo                          shift and go to state 12
    Factor                         shift and go to state 14

state 22

    (16) ExprR -> Expr NOTEQUALS . Expr
    (18) Expr -> . Termo
    (19) Expr -> . Expr + Termo
    (20) Expr -> . Expr - Termo
    (21) Termo -> . Factor
    (7) Factor -> . num
    (8) Factor -> . - num
    (9) Factor -> . id
    (10) Factor -> . TRUE
    (11) Factor -> . FALSE
    (12) Factor -> . ( ExprR )

    num             shift and go to state 15
    -               shift and go to state 13
    id              shift and go to state 29
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    (               shift and go to state 11

    Expr                           shift and go to state 34
    Termo                          shift and go to state 12
    Factor                         shift and go to state 14

state 23

    (19) Expr -> Expr + . Termo
    (21) Termo -> . Factor
    (7) Factor -> . num
    (8) Factor -> . - num
    (9) Factor -> . id
    (10) Factor -> . TRUE
    (11) Factor -> . FALSE
    (12) Factor -> . ( ExprR )

    num             shift and go to state 15
    -               shift and go to state 13
    id              shift and go to state 29
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    (               shift and go to state 11

    Termo                          shift and go to state 35
    Factor                         shift and go to state 14

state 24

    (20) Expr -> Expr - . Termo
    (21) Termo -> . Factor
    (7) Factor -> . num
    (8) Factor -> . - num
    (9) Factor -> . id
    (10) Factor -> . TRUE
    (11) Factor -> . FALSE
    (12) Factor -> . ( ExprR )

    num             shift and go to state 15
    -               shift and go to state 13
    id              shift and go to state 29
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    (               shift and go to state 11

    Termo                          shift and go to state 36
    Factor                         shift and go to state 14

state 25

    (22) Declaracao -> INT id .

    INT             reduce using rule 22 (Declaracao -> INT id .)
    id              reduce using rule 22 (Declaracao -> INT id .)
    IF              reduce using rule 22 (Declaracao -> INT id .)
    num             reduce using rule 22 (Declaracao -> INT id .)
    -               reduce using rule 22 (Declaracao -> INT id .)
    TRUE            reduce using rule 22 (Declaracao -> INT id .)
    FALSE           reduce using rule 22 (Declaracao -> INT id .)
    (               reduce using rule 22 (Declaracao -> INT id .)
    $end            reduce using rule 22 (Declaracao -> INT id .)


state 26

    (23) Atribuicao -> id = . ExprR
    (13) ExprR -> . Expr < Expr
    (14) ExprR -> . Expr > Expr
    (15) ExprR -> . Expr EQUALS Expr
    (16) ExprR -> . Expr NOTEQUALS Expr
    (17) ExprR -> . Expr
    (18) Expr -> . Termo
    (19) Expr -> . Expr + Termo
    (20) Expr -> . Expr - Termo
    (21) Termo -> . Factor
    (7) Factor -> . num
    (8) Factor -> . - num
    (9) Factor -> . id
    (10) Factor -> . TRUE
    (11) Factor -> . FALSE
    (12) Factor -> . ( ExprR )

    num             shift and go to state 15
    -               shift and go to state 13
    id              shift and go to state 29
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    (               shift and go to state 11

    ExprR                          shift and go to state 37
    Expr                           shift and go to state 7
    Termo                          shift and go to state 12
    Factor                         shift and go to state 14

state 27

    (26) IFELSE -> IF ( . ExprR ) { Atribuicoes } ELSE { Atribuicoes }
    (27) IFELSE -> IF ( . ExprR ) { Atribuicoes }
    (13) ExprR -> . Expr < Expr
    (14) ExprR -> . Expr > Expr
    (15) ExprR -> . Expr EQUALS Expr
    (16) ExprR -> . Expr NOTEQUALS Expr
    (17) ExprR -> . Expr
    (18) Expr -> . Termo
    (19) Expr -> . Expr + Termo
    (20) Expr -> . Expr - Termo
    (21) Termo -> . Factor
    (7) Factor -> . num
    (8) Factor -> . - num
    (9) Factor -> . id
    (10) Factor -> . TRUE
    (11) Factor -> . FALSE
    (12) Factor -> . ( ExprR )

    num             shift and go to state 15
    -               shift and go to state 13
    id              shift and go to state 29
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    (               shift and go to state 11

    ExprR                          shift and go to state 38
    Expr                           shift and go to state 7
    Termo                          shift and go to state 12
    Factor                         shift and go to state 14

state 28

    (12) Factor -> ( ExprR . )

    )               shift and go to state 39


state 29

    (9) Factor -> id .

    <               reduce using rule 9 (Factor -> id .)
    >               reduce using rule 9 (Factor -> id .)
    EQUALS          reduce using rule 9 (Factor -> id .)
    NOTEQUALS       reduce using rule 9 (Factor -> id .)
    +               reduce using rule 9 (Factor -> id .)
    -               reduce using rule 9 (Factor -> id .)
    )               reduce using rule 9 (Factor -> id .)
    INT             reduce using rule 9 (Factor -> id .)
    id              reduce using rule 9 (Factor -> id .)
    IF              reduce using rule 9 (Factor -> id .)
    num             reduce using rule 9 (Factor -> id .)
    TRUE            reduce using rule 9 (Factor -> id .)
    FALSE           reduce using rule 9 (Factor -> id .)
    (               reduce using rule 9 (Factor -> id .)
    $end            reduce using rule 9 (Factor -> id .)
    }               reduce using rule 9 (Factor -> id .)


state 30

    (8) Factor -> - num .

    <               reduce using rule 8 (Factor -> - num .)
    >               reduce using rule 8 (Factor -> - num .)
    EQUALS          reduce using rule 8 (Factor -> - num .)
    NOTEQUALS       reduce using rule 8 (Factor -> - num .)
    +               reduce using rule 8 (Factor -> - num .)
    -               reduce using rule 8 (Factor -> - num .)
    INT             reduce using rule 8 (Factor -> - num .)
    id              reduce using rule 8 (Factor -> - num .)
    IF              reduce using rule 8 (Factor -> - num .)
    num             reduce using rule 8 (Factor -> - num .)
    TRUE            reduce using rule 8 (Factor -> - num .)
    FALSE           reduce using rule 8 (Factor -> - num .)
    (               reduce using rule 8 (Factor -> - num .)
    $end            reduce using rule 8 (Factor -> - num .)
    )               reduce using rule 8 (Factor -> - num .)
    }               reduce using rule 8 (Factor -> - num .)


state 31

    (13) ExprR -> Expr < Expr .
    (19) Expr -> Expr . + Termo
    (20) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    INT             reduce using rule 13 (ExprR -> Expr < Expr .)
    id              reduce using rule 13 (ExprR -> Expr < Expr .)
    IF              reduce using rule 13 (ExprR -> Expr < Expr .)
    num             reduce using rule 13 (ExprR -> Expr < Expr .)
    TRUE            reduce using rule 13 (ExprR -> Expr < Expr .)
    FALSE           reduce using rule 13 (ExprR -> Expr < Expr .)
    (               reduce using rule 13 (ExprR -> Expr < Expr .)
    $end            reduce using rule 13 (ExprR -> Expr < Expr .)
    )               reduce using rule 13 (ExprR -> Expr < Expr .)
    }               reduce using rule 13 (ExprR -> Expr < Expr .)
    +               shift and go to state 23
    -               shift and go to state 24

  ! -               [ reduce using rule 13 (ExprR -> Expr < Expr .) ]


state 32

    (14) ExprR -> Expr > Expr .
    (19) Expr -> Expr . + Termo
    (20) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    INT             reduce using rule 14 (ExprR -> Expr > Expr .)
    id              reduce using rule 14 (ExprR -> Expr > Expr .)
    IF              reduce using rule 14 (ExprR -> Expr > Expr .)
    num             reduce using rule 14 (ExprR -> Expr > Expr .)
    TRUE            reduce using rule 14 (ExprR -> Expr > Expr .)
    FALSE           reduce using rule 14 (ExprR -> Expr > Expr .)
    (               reduce using rule 14 (ExprR -> Expr > Expr .)
    $end            reduce using rule 14 (ExprR -> Expr > Expr .)
    )               reduce using rule 14 (ExprR -> Expr > Expr .)
    }               reduce using rule 14 (ExprR -> Expr > Expr .)
    +               shift and go to state 23
    -               shift and go to state 24

  ! -               [ reduce using rule 14 (ExprR -> Expr > Expr .) ]


state 33

    (15) ExprR -> Expr EQUALS Expr .
    (19) Expr -> Expr . + Termo
    (20) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    INT             reduce using rule 15 (ExprR -> Expr EQUALS Expr .)
    id              reduce using rule 15 (ExprR -> Expr EQUALS Expr .)
    IF              reduce using rule 15 (ExprR -> Expr EQUALS Expr .)
    num             reduce using rule 15 (ExprR -> Expr EQUALS Expr .)
    TRUE            reduce using rule 15 (ExprR -> Expr EQUALS Expr .)
    FALSE           reduce using rule 15 (ExprR -> Expr EQUALS Expr .)
    (               reduce using rule 15 (ExprR -> Expr EQUALS Expr .)
    $end            reduce using rule 15 (ExprR -> Expr EQUALS Expr .)
    )               reduce using rule 15 (ExprR -> Expr EQUALS Expr .)
    }               reduce using rule 15 (ExprR -> Expr EQUALS Expr .)
    +               shift and go to state 23
    -               shift and go to state 24

  ! -               [ reduce using rule 15 (ExprR -> Expr EQUALS Expr .) ]


state 34

    (16) ExprR -> Expr NOTEQUALS Expr .
    (19) Expr -> Expr . + Termo
    (20) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    INT             reduce using rule 16 (ExprR -> Expr NOTEQUALS Expr .)
    id              reduce using rule 16 (ExprR -> Expr NOTEQUALS Expr .)
    IF              reduce using rule 16 (ExprR -> Expr NOTEQUALS Expr .)
    num             reduce using rule 16 (ExprR -> Expr NOTEQUALS Expr .)
    TRUE            reduce using rule 16 (ExprR -> Expr NOTEQUALS Expr .)
    FALSE           reduce using rule 16 (ExprR -> Expr NOTEQUALS Expr .)
    (               reduce using rule 16 (ExprR -> Expr NOTEQUALS Expr .)
    $end            reduce using rule 16 (ExprR -> Expr NOTEQUALS Expr .)
    )               reduce using rule 16 (ExprR -> Expr NOTEQUALS Expr .)
    }               reduce using rule 16 (ExprR -> Expr NOTEQUALS Expr .)
    +               shift and go to state 23
    -               shift and go to state 24

  ! -               [ reduce using rule 16 (ExprR -> Expr NOTEQUALS Expr .) ]


state 35

    (19) Expr -> Expr + Termo .

    <               reduce using rule 19 (Expr -> Expr + Termo .)
    >               reduce using rule 19 (Expr -> Expr + Termo .)
    EQUALS          reduce using rule 19 (Expr -> Expr + Termo .)
    NOTEQUALS       reduce using rule 19 (Expr -> Expr + Termo .)
    +               reduce using rule 19 (Expr -> Expr + Termo .)
    -               reduce using rule 19 (Expr -> Expr + Termo .)
    INT             reduce using rule 19 (Expr -> Expr + Termo .)
    id              reduce using rule 19 (Expr -> Expr + Termo .)
    IF              reduce using rule 19 (Expr -> Expr + Termo .)
    num             reduce using rule 19 (Expr -> Expr + Termo .)
    TRUE            reduce using rule 19 (Expr -> Expr + Termo .)
    FALSE           reduce using rule 19 (Expr -> Expr + Termo .)
    (               reduce using rule 19 (Expr -> Expr + Termo .)
    $end            reduce using rule 19 (Expr -> Expr + Termo .)
    )               reduce using rule 19 (Expr -> Expr + Termo .)
    }               reduce using rule 19 (Expr -> Expr + Termo .)


state 36

    (20) Expr -> Expr - Termo .

    <               reduce using rule 20 (Expr -> Expr - Termo .)
    >               reduce using rule 20 (Expr -> Expr - Termo .)
    EQUALS          reduce using rule 20 (Expr -> Expr - Termo .)
    NOTEQUALS       reduce using rule 20 (Expr -> Expr - Termo .)
    +               reduce using rule 20 (Expr -> Expr - Termo .)
    -               reduce using rule 20 (Expr -> Expr - Termo .)
    INT             reduce using rule 20 (Expr -> Expr - Termo .)
    id              reduce using rule 20 (Expr -> Expr - Termo .)
    IF              reduce using rule 20 (Expr -> Expr - Termo .)
    num             reduce using rule 20 (Expr -> Expr - Termo .)
    TRUE            reduce using rule 20 (Expr -> Expr - Termo .)
    FALSE           reduce using rule 20 (Expr -> Expr - Termo .)
    (               reduce using rule 20 (Expr -> Expr - Termo .)
    $end            reduce using rule 20 (Expr -> Expr - Termo .)
    )               reduce using rule 20 (Expr -> Expr - Termo .)
    }               reduce using rule 20 (Expr -> Expr - Termo .)


state 37

    (23) Atribuicao -> id = ExprR .

    INT             reduce using rule 23 (Atribuicao -> id = ExprR .)
    id              reduce using rule 23 (Atribuicao -> id = ExprR .)
    IF              reduce using rule 23 (Atribuicao -> id = ExprR .)
    num             reduce using rule 23 (Atribuicao -> id = ExprR .)
    -               reduce using rule 23 (Atribuicao -> id = ExprR .)
    TRUE            reduce using rule 23 (Atribuicao -> id = ExprR .)
    FALSE           reduce using rule 23 (Atribuicao -> id = ExprR .)
    (               reduce using rule 23 (Atribuicao -> id = ExprR .)
    $end            reduce using rule 23 (Atribuicao -> id = ExprR .)
    }               reduce using rule 23 (Atribuicao -> id = ExprR .)


state 38

    (26) IFELSE -> IF ( ExprR . ) { Atribuicoes } ELSE { Atribuicoes }
    (27) IFELSE -> IF ( ExprR . ) { Atribuicoes }

    )               shift and go to state 40


state 39

    (12) Factor -> ( ExprR ) .

    <               reduce using rule 12 (Factor -> ( ExprR ) .)
    >               reduce using rule 12 (Factor -> ( ExprR ) .)
    EQUALS          reduce using rule 12 (Factor -> ( ExprR ) .)
    NOTEQUALS       reduce using rule 12 (Factor -> ( ExprR ) .)
    +               reduce using rule 12 (Factor -> ( ExprR ) .)
    -               reduce using rule 12 (Factor -> ( ExprR ) .)
    INT             reduce using rule 12 (Factor -> ( ExprR ) .)
    id              reduce using rule 12 (Factor -> ( ExprR ) .)
    IF              reduce using rule 12 (Factor -> ( ExprR ) .)
    num             reduce using rule 12 (Factor -> ( ExprR ) .)
    TRUE            reduce using rule 12 (Factor -> ( ExprR ) .)
    FALSE           reduce using rule 12 (Factor -> ( ExprR ) .)
    (               reduce using rule 12 (Factor -> ( ExprR ) .)
    $end            reduce using rule 12 (Factor -> ( ExprR ) .)
    )               reduce using rule 12 (Factor -> ( ExprR ) .)
    }               reduce using rule 12 (Factor -> ( ExprR ) .)


state 40

    (26) IFELSE -> IF ( ExprR ) . { Atribuicoes } ELSE { Atribuicoes }
    (27) IFELSE -> IF ( ExprR ) . { Atribuicoes }

    {               shift and go to state 41


state 41

    (26) IFELSE -> IF ( ExprR ) { . Atribuicoes } ELSE { Atribuicoes }
    (27) IFELSE -> IF ( ExprR ) { . Atribuicoes }
    (24) Atribuicoes -> . Atribuicao
    (25) Atribuicoes -> . Atribuicoes Atribuicao
    (23) Atribuicao -> . id = ExprR

    id              shift and go to state 44

    Atribuicoes                    shift and go to state 42
    Atribuicao                     shift and go to state 43

state 42

    (26) IFELSE -> IF ( ExprR ) { Atribuicoes . } ELSE { Atribuicoes }
    (27) IFELSE -> IF ( ExprR ) { Atribuicoes . }
    (25) Atribuicoes -> Atribuicoes . Atribuicao
    (23) Atribuicao -> . id = ExprR

    }               shift and go to state 45
    id              shift and go to state 44

    Atribuicao                     shift and go to state 46

state 43

    (24) Atribuicoes -> Atribuicao .

    }               reduce using rule 24 (Atribuicoes -> Atribuicao .)
    id              reduce using rule 24 (Atribuicoes -> Atribuicao .)


state 44

    (23) Atribuicao -> id . = ExprR

    =               shift and go to state 26


state 45

    (26) IFELSE -> IF ( ExprR ) { Atribuicoes } . ELSE { Atribuicoes }
    (27) IFELSE -> IF ( ExprR ) { Atribuicoes } .

    ELSE            shift and go to state 47
    INT             reduce using rule 27 (IFELSE -> IF ( ExprR ) { Atribuicoes } .)
    id              reduce using rule 27 (IFELSE -> IF ( ExprR ) { Atribuicoes } .)
    IF              reduce using rule 27 (IFELSE -> IF ( ExprR ) { Atribuicoes } .)
    num             reduce using rule 27 (IFELSE -> IF ( ExprR ) { Atribuicoes } .)
    -               reduce using rule 27 (IFELSE -> IF ( ExprR ) { Atribuicoes } .)
    TRUE            reduce using rule 27 (IFELSE -> IF ( ExprR ) { Atribuicoes } .)
    FALSE           reduce using rule 27 (IFELSE -> IF ( ExprR ) { Atribuicoes } .)
    (               reduce using rule 27 (IFELSE -> IF ( ExprR ) { Atribuicoes } .)
    $end            reduce using rule 27 (IFELSE -> IF ( ExprR ) { Atribuicoes } .)


state 46

    (25) Atribuicoes -> Atribuicoes Atribuicao .

    }               reduce using rule 25 (Atribuicoes -> Atribuicoes Atribuicao .)
    id              reduce using rule 25 (Atribuicoes -> Atribuicoes Atribuicao .)


state 47

    (26) IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE . { Atribuicoes }

    {               shift and go to state 48


state 48

    (26) IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { . Atribuicoes }
    (24) Atribuicoes -> . Atribuicao
    (25) Atribuicoes -> . Atribuicoes Atribuicao
    (23) Atribuicao -> . id = ExprR

    id              shift and go to state 44

    Atribuicoes                    shift and go to state 49
    Atribuicao                     shift and go to state 43

state 49

    (26) IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes . }
    (25) Atribuicoes -> Atribuicoes . Atribuicao
    (23) Atribuicao -> . id = ExprR

    }               shift and go to state 50
    id              shift and go to state 44

    Atribuicao                     shift and go to state 46

state 50

    (26) IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes } .

    INT             reduce using rule 26 (IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes } .)
    id              reduce using rule 26 (IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes } .)
    IF              reduce using rule 26 (IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes } .)
    num             reduce using rule 26 (IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes } .)
    -               reduce using rule 26 (IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes } .)
    TRUE            reduce using rule 26 (IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes } .)
    FALSE           reduce using rule 26 (IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes } .)
    (               reduce using rule 26 (IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes } .)
    $end            reduce using rule 26 (IFELSE -> IF ( ExprR ) { Atribuicoes } ELSE { Atribuicoes } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for - in state 7 resolved as shift
WARNING: shift/reduce conflict for - in state 31 resolved as shift
WARNING: shift/reduce conflict for - in state 32 resolved as shift
WARNING: shift/reduce conflict for - in state 33 resolved as shift
WARNING: shift/reduce conflict for - in state 34 resolved as shift
